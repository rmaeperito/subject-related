/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;


import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author user
 */
public class frmMain extends javax.swing.JFrame {

        Connection con = null;
        ResultSet rs = null;
        PreparedStatement pst = null;
        public String rankFilterGlobal;
        
        public String[] fantasy = new String[6]; //index stands for number of candidates
        public String[] uniform=new String[6];
        public String[] gown=new String[6];
        public String[] denim=new String[6];
        public String[] talent=new String[6];
        public String[] intel=new String[6];
        
        double cand1Per, cand2Per, cand3Per, cand4Per, cand5Per, cand6Per;
        double totCand1, totCand2, totCand3, totCand4, totCand5, totCand6;
        public Double[] total = new Double[6];
        
    public frmMain() {
        initComponents();
        this.setSize(900, 600);
         con = myConn.connectDb();
    }

    public void getCriteria(){
    
     String sql = "Select name, percentage from criteria";
        try{
        
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            
           while(rs.next()){
                
               comboCriteria.addItem(rs.getString("name"));
               
            }
                       
                                
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    public void getJudge(){
    
     String sql = "Select id from judge";
        try{
        
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            
           while(rs.next()){
                
               comboJudge.addItem(rs.getString("id"));
               
            }
                       
                                
        }
        catch(Exception e){
        JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frmResult = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        comboCriteria = new javax.swing.JComboBox();
        btnLoadRank = new javax.swing.JButton();
        btnLoadCriteria = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResult = new javax.swing.JTable();
        btnPrint = new javax.swing.JButton();
        btnRank = new javax.swing.JButton();
        comboJudge = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnFinalScore = new javax.swing.JButton();
        btnPrintFinal = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuResult = new javax.swing.JMenuItem();
        menuRaw = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pageant Tabulation Admin");
        setBounds(new java.awt.Rectangle(150, 100, 0, 0));
        setName("frmMain"); // NOI18N

        frmResult.setBackground(new java.awt.Color(204, 255, 255));
        frmResult.setVisible(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Criteria");

        comboCriteria.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboCriteria.setForeground(new java.awt.Color(255, 0, 0));
        comboCriteria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Over All" }));
        comboCriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCriteriaActionPerformed(evt);
            }
        });

        btnLoadRank.setBackground(new java.awt.Color(102, 255, 0));
        btnLoadRank.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLoadRank.setText("Load Raw Score");
        btnLoadRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadRankActionPerformed(evt);
            }
        });

        btnLoadCriteria.setBackground(new java.awt.Color(102, 255, 0));
        btnLoadCriteria.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLoadCriteria.setText("Load Criteria");
        btnLoadCriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadCriteriaActionPerformed(evt);
            }
        });

        tblResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblResult.setForeground(new java.awt.Color(0, 51, 153));
        tblResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblResult);

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print.png"))); // NOI18N
        btnPrint.setText("Print by Judge");
        btnPrint.setToolTipText("Rank by Judge");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnRank.setBackground(new java.awt.Color(102, 255, 102));
        btnRank.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnRank.setText("Generate Rank");
        btnRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRankActionPerformed(evt);
            }
        });

        comboJudge.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboJudge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboJudgeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Judge");

        btnFinalScore.setBackground(new java.awt.Color(255, 255, 102));
        btnFinalScore.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnFinalScore.setText("Final Score");
        btnFinalScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalScoreActionPerformed(evt);
            }
        });

        btnPrintFinal.setBackground(new java.awt.Color(255, 255, 153));
        btnPrintFinal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print.png"))); // NOI18N
        btnPrintFinal.setText("Print Final Rank");
        btnPrintFinal.setToolTipText("Rank by Judge");
        btnPrintFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintFinalActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 204));
        jLabel3.setText("MALE CATEGORY");

        javax.swing.GroupLayout frmResultLayout = new javax.swing.GroupLayout(frmResult.getContentPane());
        frmResult.getContentPane().setLayout(frmResultLayout);
        frmResultLayout.setHorizontalGroup(
            frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmResultLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frmResultLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnPrintFinal, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(frmResultLayout.createSequentialGroup()
                        .addGroup(frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, frmResultLayout.createSequentialGroup()
                                .addComponent(btnLoadRank, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFinalScore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, frmResultLayout.createSequentialGroup()
                                .addComponent(comboJudge, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRank, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(comboCriteria, javax.swing.GroupLayout.Alignment.LEADING, 0, 280, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btnLoadCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        frmResultLayout.setVerticalGroup(
            frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmResultLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(7, 7, 7)
                .addGroup(frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoadCriteria)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadRank)
                    .addComponent(btnFinalScore))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboJudge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRank, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(frmResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frmResultLayout.createSequentialGroup()
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPrintFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(799, Short.MAX_VALUE))
        );

        jMenu1.setText("Result");

        menuResult.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        menuResult.setText("Populate Result");
        menuResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuResultActionPerformed(evt);
            }
        });
        jMenu1.add(menuResult);

        menuRaw.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        menuRaw.setText("Raw Data");
        menuRaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRawActionPerformed(evt);
            }
        });
        jMenu1.add(menuRaw);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(frmResult)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(frmResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuResultActionPerformed
       frmResult.setVisible(true);
    }//GEN-LAST:event_menuResultActionPerformed

    private void btnLoadRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadRankActionPerformed

        String rankFilter = comboCriteria.getSelectedItem().toString();
        rankFilterGlobal = rankFilter;
        int rankFilterNo = comboCriteria.getSelectedIndex();

        if(rankFilterNo == 0){
            try{
                String sql = "Select s.candNo as 'CANDIDATE NO.', sum(s.score)/count(j.id) as PERCENTAGE from score s, judge j group by s.candNo order by PERCENTAGE DESC";
                pst = con.prepareStatement(sql);

                rs = pst.executeQuery();
                tblResult.setModel(DbUtils.resultSetToTableModel(rs));

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }

        }
        else{
            
             try{
                String sql = "Select s.candNo as 'CANDIDATE NO.', sum(s.score)/count(j.id) as 'PERCENTAGE', s.criteria as 'CRITERIA' from score s, judge j where s.criteria = '"+ rankFilter + "' group by s.candNo order by PERCENTAGE DESC";
                pst = con.prepareStatement(sql);

                rs = pst.executeQuery();
                tblResult.setModel(DbUtils.resultSetToTableModel(rs));

            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            
            
        }
       

    }//GEN-LAST:event_btnLoadRankActionPerformed

    
    private void btnLoadCriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadCriteriaActionPerformed
        getCriteria();
        getJudge();

    }//GEN-LAST:event_btnLoadCriteriaActionPerformed

    private void comboCriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCriteriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCriteriaActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        String criteria = comboCriteria.getSelectedItem().toString();
        //rankFilterGlobal = rankFilter;
         String judge = comboJudge.getSelectedItem().toString();
        if("Over All".equals(criteria)){ 
          String sql = "SELECT candNo as CANDIDATE_NO, sum(rank) as ranking FROM rank group by candNo order by rank ASC";
           // String sql="Select s.candNo, j.id from score s, judge j";
          try {
                               
          
                        
                                         JasperDesign jd = JRXmlLoader.load("C:\\PAGEANTSYSTEM_Male\\reports\\overall.jrxml");
                                         JRDesignQuery newQuery = new JRDesignQuery();
                                         newQuery.setText(sql);
                                         jd.setQuery(newQuery);

                                         JasperReport rep = JasperCompileManager.compileReport(jd);
                                         JasperPrint print = JasperFillManager.fillReport(rep, null, con);
                                         JasperViewer.viewReport(print, false);

                                     } 
                          catch (JRException ex) {
                                       //  Logger.getLogger(frmReportChooser.class.getName()).log(Level.SEVERE, null, ex);
                                         JOptionPane.showMessageDialog(null, ex.getMessage());
                                     }
           
       } else {
           String sql = "SELECT criteria as CRITERIA, candNo as CANDIDATE_NO, judgeNo as JUDGE_NO, score as SCORE, FIND_IN_SET( score, (\n" +
"SELECT GROUP_CONCAT( DISTINCT score\n" +
"ORDER BY score DESC ) FROM score where criteria= '"+ criteria + "' and judgeNo= '"+ judge + "')\n" +
") AS ranking\n" +
"FROM score where criteria= '"+ criteria + " 'and judgeNo= '"+ judge + "'order by score DESC";
                        try {
                                             JasperDesign jd = JRXmlLoader.load("C:\\PAGEANTSYSTEM_Male\\reports\\rankByJudge.jrxml");
                                             JRDesignQuery newQuery = new JRDesignQuery();
                                             newQuery.setText(sql);
                                             jd.setQuery(newQuery);

                                             JasperReport rep = JasperCompileManager.compileReport(jd);
                                             JasperPrint print = JasperFillManager.fillReport(rep, null, con);
                                             JasperViewer.viewReport(print, false);

                                         } 
                              catch (JRException ex) {
                                           //  Logger.getLogger(frmReportChooser.class.getName()).log(Level.SEVERE, null, ex);
                                             JOptionPane.showMessageDialog(null, ex.getMessage());
                                         }

                         }
        
    }//GEN-LAST:event_btnPrintActionPerformed

    private void menuRawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRawActionPerformed
       
        
        String sql = "Select candNo as 'CANDIDATE NO.', sum(score) as TOTALSCORE from score group by candNo order by TOTALSCORE DESC";
           // String sql="Select s.candNo, j.id from score s, judge j";
          try {
                               
          
                        
                                         JasperDesign jd = JRXmlLoader.load("C:\\PAGEANTSYSTEM_Male\\reports\\overall_RAW.jrxml");
                                         JRDesignQuery newQuery = new JRDesignQuery();
                                         newQuery.setText(sql);
                                         jd.setQuery(newQuery);

                                         JasperReport rep = JasperCompileManager.compileReport(jd);
                                         JasperPrint print = JasperFillManager.fillReport(rep, null, con);
                                         JasperViewer.viewReport(print, false);

                                     } 
                          catch (JRException ex) {
                                       //  Logger.getLogger(frmReportChooser.class.getName()).log(Level.SEVERE, null, ex);
                                         JOptionPane.showMessageDialog(null, ex.getMessage());
                                     }
        
    }//GEN-LAST:event_menuRawActionPerformed

    private void btnRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRankActionPerformed
           
        String criteria = comboCriteria.getSelectedItem().toString();
        String judge = comboJudge.getSelectedItem().toString();

        
        if("Over All".equals(criteria)){
            
            try{
                       String sql = "SELECT candNo as CANDIDATE_NO, sum(rank) as TOTAL_JUDGESRANK FROM rank group by candNo order by rank ASC";
                       pst = con.prepareStatement(sql);

                       rs = pst.executeQuery();
                       tblResult.setModel(DbUtils.resultSetToTableModel(rs));

                   }
                   catch(Exception e){
                       JOptionPane.showMessageDialog(null, e.getMessage());
                   }
            
        
        }
        else{
               try{
                       String sql = "SELECT criteria, candNo, judgeNo, score, FIND_IN_SET( score, (\n" +
"SELECT GROUP_CONCAT( DISTINCT score\n" +
"ORDER BY score DESC ) FROM score where criteria= '"+ criteria + "' and judgeNo= '"+ judge + "')\n" +
") AS ranking\n" +
"FROM score where criteria= '"+ criteria + " 'and judgeNo= '"+ judge + "'order by score DESC";
                       pst = con.prepareStatement(sql);

                       rs = pst.executeQuery();
                       tblResult.setModel(DbUtils.resultSetToTableModel(rs));

                   }
                   catch(Exception e){
                       JOptionPane.showMessageDialog(null, e.getMessage());
                   }
        }
    }//GEN-LAST:event_btnRankActionPerformed

    private void comboJudgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboJudgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboJudgeActionPerformed

    public void computeFantasyAtire(){
        int i=0;
        try{
                String sql = "Select s.candNo as 'CANDIDATE NO.', sum(s.score)/count(j.id) as 'PERCENTAGE', s.criteria as 'CRITERIA' from score s, judge j where s.criteria = 'Fantasy Attire' group by s.candNo order by s.candNo ASC";
                pst = con.prepareStatement(sql);

                rs = pst.executeQuery();
               
                
                 while(rs.next()){
                    
                    fantasy[i] = rs.getString("PERCENTAGE");
                    
                    //JOptionPane.showMessageDialog(null, "fantasy "+ fantasy[i]);
                    i++;
                    
                 }
                 
                 // tblResult.setModel(DbUtils.resultSetToTableModel(rs));

            }
            catch(HeadlessException | SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
    }
    
    public void computeUniformAtire(){
        int i=0;
        try{
                String sql = "Select s.candNo as 'CANDIDATE NO.', sum(s.score)/count(j.id) as 'PERCENTAGE', s.criteria as 'CRITERIA' from score s, judge j where s.criteria = 'Uniform Attire' group by s.candNo order by s.candNo ASC";
                pst = con.prepareStatement(sql);

                rs = pst.executeQuery();
               
                
                 while(rs.next()){
                    
                    uniform[i] = rs.getString("PERCENTAGE");
                    
                    //JOptionPane.showMessageDialog(null, "uniform "+ uniform[i]);
                    i++;
                    
                 }
                 
            
            }
            catch(HeadlessException | SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
    }
    
    public void computeGownAtire(){
        int i=0;
        try{
                String sql = "Select s.candNo as 'CANDIDATE NO.', sum(s.score)/count(j.id) as 'PERCENTAGE', s.criteria as 'CRITERIA' from score s, judge j where s.criteria = 'Evening Gown/Formal Attire' group by s.candNo order by s.candNo ASC";
                pst = con.prepareStatement(sql);

                rs = pst.executeQuery();
               
                
                 while(rs.next()){
                    
                    gown[i] = rs.getString("PERCENTAGE");
                    
                    //JOptionPane.showMessageDialog(null, "gown "+ gown[i]);
                    i++;
                    
                 }
                 
            
            }
            catch(HeadlessException | SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
    }
    
    public void computeDenimAtire(){
        int i=0;
        try{
                String sql = "Select s.candNo as 'CANDIDATE NO.', sum(s.score)/count(j.id) as 'PERCENTAGE', s.criteria as 'CRITERIA' from score s, judge j where s.criteria = 'Denim Attire' group by s.candNo order by s.candNo ASC";
                pst = con.prepareStatement(sql);

                rs = pst.executeQuery();
               
                
                 while(rs.next()){
                    
                    denim[i] = rs.getString("PERCENTAGE");
                    
                    //JOptionPane.showMessageDialog(null, "denim "+ denim[i]);
                    i++;
                    
                 }
                 
            
            }
            catch(HeadlessException | SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
    }
    
    public void computeTalent(){
        int i=0;
        try{
                String sql = "Select s.candNo as 'CANDIDATE NO.', sum(s.score)/count(j.id) as 'PERCENTAGE', s.criteria as 'CRITERIA' from score s, judge j where s.criteria = 'Talent' group by s.candNo order by s.candNo ASC";
                pst = con.prepareStatement(sql);

                rs = pst.executeQuery();
               
                
                 while(rs.next()){
                    
                    talent[i] = rs.getString("PERCENTAGE");
                    
                    //JOptionPane.showMessageDialog(null, "talent "+ talent[i]);
                    i++;
                    
                 }
                 
            
            }
            catch(HeadlessException | SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
    }
    
    public void computeIntel(){
        int i=0;
        try{
                String sql = "Select s.candNo as 'CANDIDATE NO.', sum(s.score)/count(j.id) as 'PERCENTAGE', s.criteria as 'CRITERIA' from score s, judge j where s.criteria = 'Intelligence' group by s.candNo order by s.candNo ASC";
                pst = con.prepareStatement(sql);

                rs = pst.executeQuery();
               
                
                 while(rs.next()){
                    
                    intel[i] = rs.getString("PERCENTAGE");
                    
                    //JOptionPane.showMessageDialog(null, "intel "+ intel[i]);
                    i++;
                    
                 }
                 
            
            }
            catch(HeadlessException | SQLException e){
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
    }
    //getting the sum of criteria 1-4
    
    public void cand1Tot(){
    
        double cand1Total = (Double.parseDouble(fantasy[0])*.10) + (Double.parseDouble(uniform[0])*.10) + (Double.parseDouble(gown[0])*.10) + (Double.parseDouble(denim[0])*.10);
        //cand1Per = cand1Total * .40;
        cand1Per = cand1Total;
        //JOptionPane.showMessageDialog(null, "Candidate 1: " + cand1Per);
    }
    public void cand2Tot(){
    
        double cand2Total = (Double.parseDouble(fantasy[1])*.10) + (Double.parseDouble(uniform[1])*.10) + (Double.parseDouble(gown[1])*.10) + (Double.parseDouble(denim[1])*.10);
        //cand2Per = cand2Total * .40;
       cand2Per = cand2Total;
        //JOptionPane.showMessageDialog(null, "Candidate 2: " + cand2Per);
    }
    public void cand3Tot(){
    
        double cand3Total = (Double.parseDouble(fantasy[2])*.10) + (Double.parseDouble(uniform[2])*.10) + (Double.parseDouble(gown[2])*.10) + (Double.parseDouble(denim[2])*.10);
        cand3Per = cand3Total;
        
        //JOptionPane.showMessageDialog(null, "Candidate 3: " + cand3Per);
    }
    public void cand4Tot(){
    
        double cand4Total = (Double.parseDouble(fantasy[3])*.10) + (Double.parseDouble(uniform[3])*.10) + (Double.parseDouble(gown[3])*.10) + (Double.parseDouble(denim[3])*.10);
        cand4Per = cand4Total;
        
        //JOptionPane.showMessageDialog(null, "Candidate 4: " + cand4Per);
    }
    public void cand5Tot(){
    
        double cand5Total = (Double.parseDouble(fantasy[4])*.10) + (Double.parseDouble(uniform[4])*.10) + (Double.parseDouble(gown[4])*.10) + (Double.parseDouble(denim[4])*.10);
        cand5Per = cand5Total;
        
        //JOptionPane.showMessageDialog(null, "Candidate 5: " + cand5Per);
    }
    
    public void cand6Tot(){
    
        double cand6Total = (Double.parseDouble(fantasy[5])*.10) + (Double.parseDouble(uniform[5])*.10) + (Double.parseDouble(gown[5])*.10) + (Double.parseDouble(denim[5])*.10);
        cand6Per = cand6Total;
        
        //JOptionPane.showMessageDialog(null, "Candidate 6: " + cand6Per);
    }
    
    public void computeTotalScore(){
    
        Double talent1 = Double.parseDouble(talent[0]) * .10;
        Double intel1 = Double.parseDouble(intel[0]) * .50;
        totCand1 = cand1Per + talent1 + intel1;
        
        Double talent2 = Double.parseDouble(talent[1]) * .10;
        Double intel2 = Double.parseDouble(intel[1]) * .50;
        totCand2 = cand2Per + talent2 + intel2;
        
        Double talent3 = Double.parseDouble(talent[2]) * .10;
        Double intel3 = Double.parseDouble(intel[2]) * .50;
        totCand3 = cand3Per + talent3 + intel3;
        
        Double talent4 = Double.parseDouble(talent[3]) * .10;
        Double intel4 = Double.parseDouble(intel[3]) * .50;
        totCand4 = cand4Per + talent4 + intel4;
        
        Double talent5 = Double.parseDouble(talent[4]) * .10;
        Double intel5 = Double.parseDouble(intel[4]) * .50;
        totCand5 = cand5Per + talent5 + intel5;
        
        Double talent6 = Double.parseDouble(talent[5]) * .10;
        Double intel6 = Double.parseDouble(intel[5]) * .50;
        totCand6 = cand6Per + talent6 + intel6;
    
        
    }
    public void saveResult(){
    
    
    String sql = "Insert into result(CandidateNo, score)values(?,?)";
        
    for(int i=0; i<=5; i++){
        try{
        
            pst = con.prepareStatement(sql);
            pst.setString(1, String.valueOf(i+1));
            pst.setString(2, String.valueOf(total[i]));
                   
           
            pst.execute();
                            
                  
                       
        }
        catch(HeadlessException e){
           
        JOptionPane.showMessageDialog(null, e.getMessage());
        
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
       }
        
    }
    
        JOptionPane.showMessageDialog(null, "Final result tabulated!!!");
    }
    
    public void loadResult(){
    
        
        
        try{
            String sql = "Select CandidateNo, score from result group by candidateNo order by score DESC";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            tblResult.setModel(DbUtils.resultSetToTableModel(rs));
            
        }
        catch(SQLException e){
        
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    
    }
    
    private void btnFinalScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalScoreActionPerformed
       
        computeFantasyAtire();
        computeUniformAtire();
        computeGownAtire();
        computeDenimAtire();
        
        cand1Tot();
        cand2Tot();
        cand3Tot();
        cand4Tot();
        cand5Tot();
        cand6Tot();
                
        computeTalent();
            
        computeIntel();
        
        computeTotalScore();
        
               
        total[0]= totCand1;
        total[1]= totCand2;
        total[2]= totCand3;
        total[3]= totCand4;
        total[4]= totCand5;
        total[5]= totCand6;
       /** 
        JOptionPane.showMessageDialog(null, total[0]);
        JOptionPane.showMessageDialog(null, total[1]);
        JOptionPane.showMessageDialog(null, total[2]);
        JOptionPane.showMessageDialog(null, total[3]);
        JOptionPane.showMessageDialog(null, total[4]);
        JOptionPane.showMessageDialog(null, total[5]);
        **/
                   
        saveResult();
        //i-load na lng sa table
        loadResult();
    }//GEN-LAST:event_btnFinalScoreActionPerformed

    private void btnPrintFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintFinalActionPerformed
        
            String sql = "Select CandidateNo, score from result group by CandidateNo order by score DESC";
        
                        try {
                          
          
                        
                                         JasperDesign jd = JRXmlLoader.load("C:\\PAGEANTSYSTEM_Male\\reports\\final.jrxml");
                                         JRDesignQuery newQuery = new JRDesignQuery();
                                         newQuery.setText(sql);
                                         jd.setQuery(newQuery);

                                         JasperReport rep = JasperCompileManager.compileReport(jd);
                                         JasperPrint print = JasperFillManager.fillReport(rep, null, con);
                                         JasperViewer.viewReport(print, false);

                                     } 
                          catch (JRException ex) {
                                       //  Logger.getLogger(frmReportChooser.class.getName()).log(Level.SEVERE, null, ex);
                                         JOptionPane.showMessageDialog(null, ex.getMessage());
                                     }
        
        
    }//GEN-LAST:event_btnPrintFinalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFinalScore;
    private javax.swing.JButton btnLoadCriteria;
    private javax.swing.JButton btnLoadRank;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnPrintFinal;
    private javax.swing.JButton btnRank;
    private javax.swing.JComboBox comboCriteria;
    private javax.swing.JComboBox<String> comboJudge;
    private javax.swing.JInternalFrame frmResult;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem menuRaw;
    private javax.swing.JMenuItem menuResult;
    private javax.swing.JTable tblResult;
    // End of variables declaration//GEN-END:variables
}
